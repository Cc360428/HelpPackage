// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server.proto

package help_package_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 性别类型
// 枚举类型第一个字段必须为0
type GenderType int32

const (
	GenderType_SECRET GenderType = 0
	GenderType_FEMALE GenderType = 1
	GenderType_MALE   GenderType = 2
)

var GenderType_name = map[int32]string{
	0: "SECRET",
	1: "FEMALE",
	2: "MALE",
}

var GenderType_value = map[string]int32{
	"SECRET": 0,
	"FEMALE": 1,
	"MALE":   2,
}

func (x GenderType) String() string {
	return proto.EnumName(GenderType_name, int32(x))
}

func (GenderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{0}
}

// request
type GetNameByCodeRequest struct {
	Code     int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	CodeType string `protobuf:"bytes,2,opt,name=codeType,proto3" json:"codeType,omitempty"`
	// 定义数组
	ClientTokens         []string   `protobuf:"bytes,3,rep,name=ClientTokens,proto3" json:"ClientTokens,omitempty"`
	Gender               GenderType `protobuf:"varint,4,opt,name=gender,proto3,enum=help_package.v1.GenderType" json:"gender,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetNameByCodeRequest) Reset()         { *m = GetNameByCodeRequest{} }
func (m *GetNameByCodeRequest) String() string { return proto.CompactTextString(m) }
func (*GetNameByCodeRequest) ProtoMessage()    {}
func (*GetNameByCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{0}
}
func (m *GetNameByCodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNameByCodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNameByCodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNameByCodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNameByCodeRequest.Merge(m, src)
}
func (m *GetNameByCodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNameByCodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNameByCodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNameByCodeRequest proto.InternalMessageInfo

func (m *GetNameByCodeRequest) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetNameByCodeRequest) GetCodeType() string {
	if m != nil {
		return m.CodeType
	}
	return ""
}

func (m *GetNameByCodeRequest) GetClientTokens() []string {
	if m != nil {
		return m.ClientTokens
	}
	return nil
}

func (m *GetNameByCodeRequest) GetGender() GenderType {
	if m != nil {
		return m.Gender
	}
	return GenderType_SECRET
}

// response
type GetNameByCodeResponse struct {
	Name                 string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Persons              []*GetNameByCodeRequest `protobuf:"bytes,2,rep,name=persons,proto3" json:"persons,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetNameByCodeResponse) Reset()         { *m = GetNameByCodeResponse{} }
func (m *GetNameByCodeResponse) String() string { return proto.CompactTextString(m) }
func (*GetNameByCodeResponse) ProtoMessage()    {}
func (*GetNameByCodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{1}
}
func (m *GetNameByCodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNameByCodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNameByCodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNameByCodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNameByCodeResponse.Merge(m, src)
}
func (m *GetNameByCodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNameByCodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNameByCodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNameByCodeResponse proto.InternalMessageInfo

func (m *GetNameByCodeResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetNameByCodeResponse) GetPersons() []*GetNameByCodeRequest {
	if m != nil {
		return m.Persons
	}
	return nil
}

func init() {
	proto.RegisterEnum("help_package.v1.GenderType", GenderType_name, GenderType_value)
	proto.RegisterType((*GetNameByCodeRequest)(nil), "help_package.v1.GetNameByCodeRequest")
	proto.RegisterType((*GetNameByCodeResponse)(nil), "help_package.v1.GetNameByCodeResponse")
}

func init() { proto.RegisterFile("server.proto", fileDescriptor_ad098daeda4239f7) }

var fileDescriptor_ad098daeda4239f7 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xdf, 0x4a, 0xc3, 0x30,
	0x14, 0x87, 0x97, 0x75, 0xcc, 0xf5, 0x38, 0x75, 0x04, 0x85, 0x32, 0xa1, 0x94, 0x82, 0x52, 0xbc,
	0x28, 0xd8, 0x3d, 0x80, 0xb8, 0x52, 0x77, 0xa3, 0x22, 0xb1, 0xf7, 0x5a, 0xdb, 0xc3, 0x94, 0xb5,
	0x49, 0x6c, 0xea, 0x60, 0x6f, 0xe2, 0x9d, 0xaf, 0xe3, 0xa5, 0x8f, 0x20, 0xf5, 0x45, 0xa4, 0xad,
	0x7f, 0xd8, 0x14, 0xf4, 0x2a, 0x5f, 0x92, 0x93, 0xdf, 0xf9, 0x0e, 0x81, 0xbe, 0xc2, 0x7c, 0x8e,
	0xb9, 0x2b, 0x73, 0x51, 0x08, 0xba, 0x75, 0x8b, 0xa9, 0xbc, 0x92, 0x51, 0x3c, 0x8b, 0xa6, 0xe8,
	0xce, 0x0f, 0xed, 0x27, 0x02, 0xdb, 0x13, 0x2c, 0xce, 0xa3, 0x0c, 0xc7, 0x0b, 0x5f, 0x24, 0xc8,
	0xf0, 0xfe, 0x01, 0x55, 0x41, 0x29, 0x74, 0x62, 0x91, 0xa0, 0x41, 0x2c, 0xe2, 0x68, 0xac, 0x66,
	0x3a, 0x84, 0x5e, 0xb5, 0x86, 0x0b, 0x89, 0x46, 0xdb, 0x22, 0x8e, 0xce, 0xbe, 0xf6, 0xd4, 0x86,
	0xbe, 0x9f, 0xde, 0x21, 0x2f, 0x42, 0x31, 0x43, 0xae, 0x0c, 0xcd, 0xd2, 0x1c, 0x9d, 0x2d, 0x9d,
	0xd1, 0x11, 0x74, 0xa7, 0xc8, 0x13, 0xcc, 0x8d, 0x8e, 0x45, 0x9c, 0x4d, 0x6f, 0xd7, 0x5d, 0xd1,
	0x71, 0x27, 0xf5, 0x75, 0x15, 0xc8, 0x3e, 0x4a, 0xed, 0x14, 0x76, 0x56, 0x04, 0x95, 0x14, 0x5c,
	0x61, 0x65, 0xc8, 0xa3, 0xac, 0x31, 0xd4, 0x59, 0xcd, 0xf4, 0x08, 0xd6, 0x24, 0xe6, 0x4a, 0x70,
	0x65, 0xb4, 0x2d, 0xcd, 0x59, 0xf7, 0xf6, 0x7e, 0x69, 0xf1, 0x73, 0x5a, 0xf6, 0xf9, 0xea, 0xc0,
	0x05, 0xf8, 0x76, 0xa0, 0x00, 0xdd, 0xcb, 0xc0, 0x67, 0x41, 0x38, 0x68, 0x55, 0x7c, 0x12, 0x9c,
	0x1d, 0x9f, 0x06, 0x03, 0x42, 0x7b, 0xd0, 0xa9, 0xa9, 0xed, 0x65, 0xa0, 0xfb, 0xf1, 0x45, 0x93,
	0x4e, 0xaf, 0x61, 0x63, 0x29, 0x9d, 0xfe, 0xaf, 0xfb, 0x70, 0xff, 0xaf, 0xb2, 0x66, 0x62, 0xbb,
	0x35, 0x1e, 0x3c, 0x97, 0x26, 0x79, 0x29, 0x4d, 0xf2, 0x5a, 0x9a, 0xe4, 0xf1, 0xcd, 0x6c, 0xdd,
	0x74, 0xeb, 0x8f, 0x1d, 0xbd, 0x07, 0x00, 0x00, 0xff, 0xff, 0x63, 0x0e, 0x1a, 0xaf, 0xe8, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CcPackageClient is the client API for CcPackage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CcPackageClient interface {
	// rpc funcName (request) returns (response) {}
	GetNameByCode(ctx context.Context, in *GetNameByCodeRequest, opts ...grpc.CallOption) (*GetNameByCodeResponse, error)
}

type ccPackageClient struct {
	cc *grpc.ClientConn
}

func NewCcPackageClient(cc *grpc.ClientConn) CcPackageClient {
	return &ccPackageClient{cc}
}

func (c *ccPackageClient) GetNameByCode(ctx context.Context, in *GetNameByCodeRequest, opts ...grpc.CallOption) (*GetNameByCodeResponse, error) {
	out := new(GetNameByCodeResponse)
	err := c.cc.Invoke(ctx, "/help_package.v1.CcPackage/GetNameByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CcPackageServer is the server API for CcPackage service.
type CcPackageServer interface {
	// rpc funcName (request) returns (response) {}
	GetNameByCode(context.Context, *GetNameByCodeRequest) (*GetNameByCodeResponse, error)
}

// UnimplementedCcPackageServer can be embedded to have forward compatible implementations.
type UnimplementedCcPackageServer struct {
}

func (*UnimplementedCcPackageServer) GetNameByCode(ctx context.Context, req *GetNameByCodeRequest) (*GetNameByCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNameByCode not implemented")
}

func RegisterCcPackageServer(s *grpc.Server, srv CcPackageServer) {
	s.RegisterService(&_CcPackage_serviceDesc, srv)
}

func _CcPackage_GetNameByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNameByCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CcPackageServer).GetNameByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/help_package.v1.CcPackage/GetNameByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CcPackageServer).GetNameByCode(ctx, req.(*GetNameByCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CcPackage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "help_package.v1.CcPackage",
	HandlerType: (*CcPackageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNameByCode",
			Handler:    _CcPackage_GetNameByCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func (m *GetNameByCodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNameByCodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNameByCodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Gender != 0 {
		i = encodeVarintServer(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ClientTokens) > 0 {
		for iNdEx := len(m.ClientTokens) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClientTokens[iNdEx])
			copy(dAtA[i:], m.ClientTokens[iNdEx])
			i = encodeVarintServer(dAtA, i, uint64(len(m.ClientTokens[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CodeType) > 0 {
		i -= len(m.CodeType)
		copy(dAtA[i:], m.CodeType)
		i = encodeVarintServer(dAtA, i, uint64(len(m.CodeType)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintServer(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetNameByCodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNameByCodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNameByCodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Persons) > 0 {
		for iNdEx := len(m.Persons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Persons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintServer(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintServer(dAtA []byte, offset int, v uint64) int {
	offset -= sovServer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetNameByCodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovServer(uint64(m.Code))
	}
	l = len(m.CodeType)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if len(m.ClientTokens) > 0 {
		for _, s := range m.ClientTokens {
			l = len(s)
			n += 1 + l + sovServer(uint64(l))
		}
	}
	if m.Gender != 0 {
		n += 1 + sovServer(uint64(m.Gender))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetNameByCodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if len(m.Persons) > 0 {
		for _, e := range m.Persons {
			l = e.Size()
			n += 1 + l + sovServer(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovServer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServer(x uint64) (n int) {
	return sovServer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetNameByCodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNameByCodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNameByCodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientTokens = append(m.ClientTokens, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= GenderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNameByCodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNameByCodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNameByCodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Persons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Persons = append(m.Persons, &GetNameByCodeRequest{})
			if err := m.Persons[len(m.Persons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupServer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthServer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthServer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupServer = fmt.Errorf("proto: unexpected end of group")
)
